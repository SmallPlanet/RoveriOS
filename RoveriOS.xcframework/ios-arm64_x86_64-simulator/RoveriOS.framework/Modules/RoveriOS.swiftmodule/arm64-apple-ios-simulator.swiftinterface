// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RoveriOS
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct Connection : Swift.Codable {
  public let merchantId: Swift.Int
  public let account: Swift.String
  public let password: Swift.String?
  public let cookiesBase64: Swift.String?
  public let fromDate: Foundation.Date?
  public let appInfo: Swift.String?
  public let userInteractionRequired: Swift.Bool
  public init(merchantId: Swift.Int, account: Swift.String, password: Swift.String?, cookiesBase64: Swift.String?, fromDate: Foundation.Date?, appInfo: Swift.String?, userInteractionRequired: Swift.Bool)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Merchant : Swift.Codable {
  public let merchantId: Swift.Int
  public let name: Swift.String
  public let category: Swift.String?
  public let subcategory: Swift.String?
  public let version: Swift.Int
  public let logoLight: Swift.String?
  public let logoDark: Swift.String?
  public init(merchantId: Swift.Int, name: Swift.String, category: Swift.String?, subcategory: Swift.String?, version: Swift.Int, logoLight: Swift.String?, logoDark: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum MerchantId : Swift.Int, Swift.Codable, Swift.CaseIterable {
  case gmail
  case yahoo
  case aol
  case outlook
  case amazon
  case instacart
  case kroger
  case starbucks
  case walmart
  case chewy
  case walgreens
  case cvs
  case costco
  case target
  case unitedHealthcare
  case aetna
  case cigna
  case anthem
  case umr
  case metlife
  case medicare
  case bcbstx
  case bcbsok
  case bcbsil
  case bcbsma
  case bcbshorizon
  case bcbsca
  case deltadental
  case guardiandental
  case eyemed
  case wolfe0
  case netflix
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RoveriOS.MerchantId]
  public typealias RawValue = Swift.Int
  public static var allCases: [RoveriOS.MerchantId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public class ScrapeServiceGroupStatus : Swift.Codable {
  public var name: Swift.String
  public var t1PullCount: Swift.Int
  public var t1ValidCount: Swift.Int
  public var t1ErrorCount: Swift.Int
  public var t2PullCount: Swift.Int
  public var t2ValidCount: Swift.Int
  public var t2ErrorCount: Swift.Int
  public var t3PullCount: Swift.Int
  public var t3ValidCount: Swift.Int
  public var t3ErrorCount: Swift.Int
  public init(name: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class ScrapeStatus : Swift.Codable {
  public var ScrapeStatus: Swift.Bool
  public var sessionUUID: Swift.String
  public var error: Swift.String?
  public var userError: Swift.String?
  public var verboseError: Swift.String?
  public var resetCount: Swift.Int
  public var merchantVersion: Swift.String?
  public var progress: Swift.Double
  public var stepProgress: Swift.Double
  public var currentStep: Swift.Int
  public var maxSteps: Swift.Int
  public var serviceGroupStatus: [RoveriOS.ScrapeServiceGroupStatus]
  public var tagLog: [Swift.String]
  public var userTag: Swift.String
  public var successReceipts: Swift.Int
  public var unknownReceipts: Swift.Int
  public var errorReceipts: Swift.Int
  public var elapsedSeconds: Swift.Int
  public init(sessionUUID: Swift.String, progress: Swift.Double, error: Swift.String?, verboseError: Swift.String?)
  public init(sessionUUID: Swift.String)
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct ServiceGroupRequest : Swift.Codable {
  public let disabled: Swift.Bool?
  public let name: Swift.String?
  public let fromDate: Foundation.Date?
  public let lastScrapedOrderNumber: Swift.String?
  public init(disabled: Swift.Bool?, name: Swift.String?, fromDate: Foundation.Date?, lastScrapedOrderNumber: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ScrapeRequest : Swift.Codable {
  public var ScrapeRequest: Swift.Bool
  public let delegateUUID: Swift.String
  public let userId: Swift.String
  public let applicationId: Swift.String
  public var account: Swift.String
  public var password: Swift.String?
  public var cookiesBase64: Swift.String?
  public var merchantId: Swift.Int?
  public var javascript: Foundation.Data?
  public let javascriptUrl: Swift.String?
  public let javascriptVersion: Swift.Int?
  public var fromDate: Foundation.Date?
  public var toDate: Foundation.Date?
  public let serviceGroupRequests: [RoveriOS.ServiceGroupRequest]?
  public var tier1BatchSize: Swift.Int?
  public var tier2BatchSize: Swift.Int?
  public var tier3BatchSize: Swift.Int?
  public var receiptsBatchSize: Swift.Int?
  public var collectItemInfo: Swift.Bool?
  public var collectSourceData: Swift.Bool?
  public var isEphemeral: Swift.Bool?
  public var hasBackend: Swift.Bool?
  public var allowUserInteractionRequired: Swift.Bool?
  public var exclusivityId: Swift.Int?
  public let extraInfo: [Swift.String]?
  public var appInfo: Swift.String?
  public var featureFlags: [Swift.String]?
  public var proxy: Swift.String?
  public var isUnitTest: Swift.Bool?
  public var overrideMimicDesktopIfPossible: Swift.Bool?
  public var overrideWebviewBlockImageLoading: Swift.Bool?
  public var allowServerInteractionRequired: Swift.Bool?
  public var roverLicense: Swift.String?
  public init(delegateUUID: Swift.String, userId: Swift.String, applicationId: Swift.String, account: Swift.String, password: Swift.String?, cookiesBase64: Swift.String?, merchantId: Swift.Int?, javascript: Foundation.Data?, javascriptUrl: Swift.String?, javascriptVersion: Swift.Int?, fromDate: Foundation.Date?, toDate: Foundation.Date?, serviceGroupRequests: [RoveriOS.ServiceGroupRequest]?, tier1BatchSize: Swift.Int?, tier2BatchSize: Swift.Int?, tier3BatchSize: Swift.Int?, receiptsBatchSize: Swift.Int?, collectItemInfo: Swift.Bool?, collectSourceData: Swift.Bool?, isEphemeral: Swift.Bool?, hasBackend: Swift.Bool?, allowUserInteractionRequired: Swift.Bool?, exclusivityId: Swift.Int?, extraInfo: [Swift.String]?, appInfo: Swift.String?, featureFlags: [Swift.String]?, proxy: Swift.String?, isUnitTest: Swift.Bool?, overrideMimicDesktopIfPossible: Swift.Bool?, overrideWebviewBlockImageLoading: Swift.Bool?, allowServerInteractionRequired: Swift.Bool?, roverLicense: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ReceiptFee : Swift.Codable {
  public var price: Swift.String?
  public var name: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ReceiptAddress : Swift.Codable {
  public var name: Swift.String?
  public var address1: Swift.String?
  public var address2: Swift.String?
  public var city: Swift.String?
  public var state: Swift.String?
  public var zip: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ReceiptItem : Swift.Codable {
  public var title: Swift.String?
  public var titleOther: [Swift.String]?
  public var titleAuthors: [Swift.String]?
  public var quantity: Swift.String?
  public var weight: Swift.String?
  public var asin: Swift.String?
  public var imageUrl: Swift.String?
  public var productUrl: Swift.String?
  public var condition: Swift.String?
  public var soldBy: Swift.String?
  public var deliveryStatus: Swift.String?
  public var itemIndex: Swift.String?
  public var itemId: Swift.String?
  public var upc: Swift.String?
  public var brand: Swift.String?
  public var category: Swift.String?
  public var manufacturer: Swift.String?
  public var originalUnitPrice: Swift.String?
  public var unitPrice: Swift.String?
  public var totalPrice: Swift.String?
  public var notAvailable: Swift.String?
  public var substitution: Swift.String?
  public var substitutionPrice: Swift.String?
  public var color: Swift.String?
  public var size: Swift.String?
  public var type: Swift.String?
  public var trackingId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Receipt : Swift.Codable {
  public var duplicationId: Swift.String?
  public var receiptId: Swift.String?
  public var receiptDomain: Swift.String?
  public var error: Swift.String?
  public var validationError: Swift.String?
  public var storeName: Swift.String?
  public var contentStoreName: Swift.String?
  public var serviceGroup: Swift.String?
  public var collectedDate: Foundation.Date?
  public var purchasedDate: Foundation.Date?
  public var continuationDate: Foundation.Date?
  public var membershipInfo: Swift.String?
  public var orderUrl: Swift.String?
  public var additionalOrderUrl: Swift.String?
  public var fees: [RoveriOS.ReceiptFee]?
  public var tax: Swift.String?
  public var total: Swift.String?
  public var totalWithoutTax: Swift.String?
  public var deliveryCharge: Swift.String?
  public var discounts: Swift.String?
  public var giftCards: Swift.String?
  public var currency: Swift.String?
  public var paymentMethod: Swift.String?
  public var paymentChannel: Swift.String?
  public var shippingAddress: RoveriOS.ReceiptAddress?
  public var merchantAddress: RoveriOS.ReceiptAddress?
  public var items: [RoveriOS.ReceiptItem]
  public var sourceData: Swift.String?
  public var clientInfo: Swift.String?
  public var auxData: Swift.String?
  public var merchantLocalPurchaseDate: Foundation.Date?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension RoveriOS.Rover {
  public enum Environment : Swift.String, Swift.Codable {
    case staging
    case production
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Rover : ObjectiveC.NSObject {
  public static let shared: RoveriOS.Rover
  public var featureFlags: [Swift.String] {
    get
  }
  public var coreVersion: Swift.String {
    get
  }
  public var version: Swift.String {
    get
  }
  public func configure(licenseKey: Swift.String, environment: RoveriOS.Rover.Environment = .staging, deviceId: Swift.String = "unknown", maxConcurrentCollections: Swift.Int = 4, callback: @escaping ([RoveriOS.Merchant], Swift.String?) -> ())
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func configure(licenseKey: Swift.String, environment: RoveriOS.Rover.Environment = .staging, deviceId: Swift.String = "unknown", maxConcurrentCollections: Swift.Int = 4) async -> ([RoveriOS.Merchant], Swift.String?)
  #endif
  public func collect(userId: Swift.String? = nil, account: Swift.String? = nil, password: Swift.String? = nil, cookiesBase64: Swift.String? = nil, merchantId: Swift.Int?, javascript: Foundation.Data? = nil, javascriptUrl: Swift.String? = nil, javascriptVersion: Swift.Int? = nil, fromDate: Foundation.Date, toDate: Foundation.Date? = nil, serviceGroupRequests: [RoveriOS.ServiceGroupRequest]? = nil, tier1BatchSize: Swift.Int = 16, tier2BatchSize: Swift.Int = 16, tier3BatchSize: Swift.Int = 16, receiptsBatchSize: Swift.Int = 8, collectItemInfo: Swift.Bool? = false, collectSourceData: Swift.Bool? = false, isEphemeral: Swift.Bool = false, hasBackend: Swift.Bool = false, allowUserInteractionRequired: Swift.Bool = true, appInfo: Swift.String? = nil, featureFlags: [Swift.String]? = nil, overrideMimicDesktopIfPossible: Swift.Bool? = nil, overrideWebviewBlockImageLoading: Swift.Bool? = nil, delegate: RoveriOS.RoverDelegate)
  public func cancel(sessionUUID: Swift.String, callback: @escaping (Swift.String?) -> ())
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func cancel(sessionUUID: Swift.String) async -> (Swift.String?)
  #endif
  public func cancelAll(callback: @escaping (Swift.String?) -> ())
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func cancelAll() async -> (Swift.String?)
  #endif
  public func preconfig(userId: Swift.String? = nil, merchantId: Swift.Int?, javascript: Foundation.Data? = nil, javascriptUrl: Swift.String? = nil, javascriptVersion: Swift.Int? = nil, delegate: RoveriOS.RoverDelegate, callback: @escaping (_ preconfig: Swift.String?, _ error: Swift.String?) -> ())
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func preconfig(userId: Swift.String? = nil, merchantId: Swift.Int?, javascript: Foundation.Data? = nil, javascriptUrl: Swift.String? = nil, javascriptVersion: Swift.Int? = nil, delegate: RoveriOS.RoverDelegate) async -> (Swift.String?, Swift.String?)
  #endif
  public func connections(_ callback: @escaping ([RoveriOS.Connection]) -> ())
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func connections() async -> ([RoveriOS.Connection])
  #endif
  public func remove(account: Swift.String, merchantId: Swift.Int, _ callback: @escaping () -> ())
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func remove(account: Swift.String, merchantId: Swift.Int) async
  #endif
  public func remove(connection: RoveriOS.Connection, _ callback: @escaping () -> ())
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func remove(connection: RoveriOS.Connection) async
  #endif
  public func pull(authorization: Swift.String, requestsUrl: Swift.String, resultsUrl: Swift.String, statusUrl: Swift.String?, _ callback: @escaping (Swift.Int, Swift.String?) -> ())
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0.0, *)
  public func pull(authorization: Swift.String, requestsUrl: Swift.String, resultsUrl: Swift.String, statusUrl: Swift.String?) async -> (Swift.Int, Swift.String?)
  #endif
  @objc deinit
}
open class RoverDelegate {
  open func roverDidFinish(sessionUUID: Swift.String, resultsGzip: Foundation.Data, error: Swift.String?, userError: Swift.String?, verboseError: Swift.String?)
  public init()
  open func roverDidInit(sessionUUID: Swift.String, scrapeRequest: RoveriOS.ScrapeRequest, callback: @escaping (_ scrapeRequest: RoveriOS.ScrapeRequest, _ error: Swift.String?) -> ())
  open func roverDidCollect(sessionUUID: Swift.String, receipts: [RoveriOS.Receipt])
  open func roverHasStatus(sessionUUID: Swift.String, progress: Swift.Double, stepProgress: Swift.Double, currentStep: Swift.Int, maxSteps: Swift.Int, serviceGroupStatus: [RoveriOS.ScrapeServiceGroupStatus], merchantVersion: Swift.String?, tagLog: [Swift.String], userTag: Swift.String)
  open func roverAccountDidLogin(sessionUUID: Swift.String, oldAccount: Swift.String, newAccount: Swift.String, password: Swift.String, cookiesBase64: Swift.String?, callback: @escaping (_ error: Swift.String?, _ appInfo: Swift.String?) -> ())
  open func roverRequestDownload(url: Swift.String, callback: @escaping (_ error: Swift.String?, _ data: Foundation.Data?) -> ())
  open func roverPullT1(sessionUUID: Swift.String, serviceGroup: Swift.String, callback: @escaping (_ error: Swift.String?, _ appInfo: Swift.String?) -> ())
  open func roverPushT1(sessionUUID: Swift.String, serviceGroup: Swift.String, orders: [Swift.String], callback: @escaping (_ error: Swift.String?, _ appInfo: Swift.String?) -> ())
  open func roverPullT2(sessionUUID: Swift.String, callback: @escaping (_ error: Swift.String?, _ orders: [Swift.String], _ appInfo: Swift.String?) -> ())
  open func roverPushT2(sessionUUID: Swift.String, orders: [Swift.String], callback: @escaping (_ error: Swift.String?, _ appInfo: Swift.String?) -> ())
  open func roverPullT3(sessionUUID: Swift.String, callback: @escaping (_ error: Swift.String?, _ orders: [Swift.String], _ appInfo: Swift.String?) -> ())
  open func roverPushT3(sessionUUID: Swift.String, orders: [Swift.String], callback: @escaping (_ error: Swift.String?, _ appInfo: Swift.String?) -> ())
  @objc deinit
}
public enum Pamphlet {
  public static let version: Swift.String
  public static func get(string member: Swift.String) -> Swift.StaticString?
  public static func get(gzip member: Swift.String) -> Foundation.Data?
  public static func get(data member: Swift.String) -> Foundation.Data?
}
extension RoveriOS.MerchantId : Swift.Equatable {}
extension RoveriOS.MerchantId : Swift.Hashable {}
extension RoveriOS.MerchantId : Swift.RawRepresentable {}
extension RoveriOS.Rover.Environment : Swift.Equatable {}
extension RoveriOS.Rover.Environment : Swift.Hashable {}
extension RoveriOS.Rover.Environment : Swift.RawRepresentable {}
